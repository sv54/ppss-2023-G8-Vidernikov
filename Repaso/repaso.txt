Las mismas practicas de segundo parcial solo que las vuelvo a hacer antes del examen.

---------------------------------
P06A
---------------------------------

Proyecto multimodulo no contiene codigo y solo contiene POM aggregator aparte de los modulos. El mecanismo de Maven usado para gestionar modulos se llama reactor. Se encarga de recopilar todos los modulos y los ordena para la construccion. El orden es importante.

POM Padre de proyecto multimodulo (POM aggregator)
  <groupId>ppss</groupid>
  <artifactId>matriculacion</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <modelues>
    <module>modulo1</module>
    <module>modulo2</module>
  </modelues>
  
POM de modulo debe incluir
<parent>
  <groupId>ppss</groupid>
  <artifactId>matriculacion</artifactId>
  <version>1.0-SNAPSHOT</version>
</parent>
<artifactId>modulo1</artifactId>

Si modulo1 depende de modulo2 (en la representacion modulo1 apunta a modulo2 con la flecha)
<dependecies>
  <dependecy>
    <groupId>{project.groupId}</groupid>
    <artifactId>modulo2</artifactId>
    <version>{project.version}</version>
  </dependecy>
</dependecies>

---------------------------------
P06B
---------------------------------
POM
---------------------------------
<dependecy>
  <groupId>org.dbunit</groupid>
  <artifactId>dbunit</artifactId>
  <version>2.7.3</version>
  <scope>test</scope>
</dependecy>
<dependecy>
  <groupId>com.mysql</groupid>
  <artifactId>mysql-connector-j</artifactId>
  <version>8.0.32</version>
  <scope>test</scope>
</dependecy>
<build>
  <plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupid>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>8.0.32</version>
        <executions>
          <execution>
            <goal>integration-test</goal>
            <goal>verify</goal>
          </execution>
        </executions>
    <plugin>
  </plugins>
</build>

Si queremos ejecutar sentencias sql antes de los test:

<plugin>
 <groupId>org.codehaus.mojo</groupId>
 <artifactId>sql-maven-plugin</artifactId>  #Ejecuta sentencias SQL
 <version>1.5</version>
 <dependencies>
   <dependency>
     <groupId>com.mysql</groupId>
     <artifactId>mysql-connector-j</artifactId> #Dependencia con el driver JDBC para acceder a la BD
     <version>8.0.32</version>
   </dependency>
 </dependencies>
 <configuration>  #Configuracion de driver
   <driver>com.mysql.cj.jdbc.Driver</driver>
   <url>jdbc:mysql://localhost:3306/?useSSL=false</url>
   <username>root</username>
   <password>ppss</password>
 </configuration> 
 <executions>
  <execution>
    <id>create-customer-table</id>
    <phase>pre-integration-test</phase> #Ejectuar antes de tests de integracion
    <goals>
      <goal>execute</goal>
    </goals>
    <configuration> 
     <srcFiles>
       <srcFile>src/test/resources/sql/create_table_customer.sql</srcFile>  #script que se ejecutara
      </srcFiles>
    </configuration>
  </execution>
 </executions>
</plugin>

---------------------------------
Ejemplo de test de Integracion 
---------------------------------

Debemos incluir en los test de integracion:
IDatabaseTester tester;
IDatabaseConnection connection;

@BeforeEach
public void setup(){
  String cadenaConexion = "jdbc:mysql://localhost:3306/baseDatos?useSSL=false";
  String driver = "com.mysql.cj.jdbc.Driver";
  tester = new JdbcDatabaseTester(driver, cadenaConexion, "root", "ppss");
  conection = tester.getConnection();
  
  #Si hay una tabla xml inicial que siempre se va cargar:
  IDataSet dataset = new FlatXmlDataLoader().load("/tabla-init.xml");
  tester.setDataSet(dataSet);
  tester.onSetup();
}

@Test
public void c1(){

  #Cargamos tabla inicial si no lo hicimos en el beforeEach
  IDataSet dataset = new FlatXmlDataLoader().load("init.xml");
  tester.setDataSet(dataset);
  tester.onSetup();
  
  LLamamos SUT
  Assertions.assertDoesNotThrow(()-> new addAlumno(new Alumno()));
  
  #Recuperamos datos de la bd actual
  IDataSet actualDataSet = connection.createDataSet();
  ITable actualTable = actualDataSet.getTable("nombreTabla");
  
  #Cargamos expected db con flatxmldataloader
  #Comparamos las 2 tablas
}

#Si nuestro test debe fallar:
@Test
public void c2(){
  Exception e = Assertions.assertThrows(Exception.class, ()-> addAlumno(a));
  Assertions.assertEquals("mensaje", e.getMessage());
}

---------------------------------
P07
---------------------------------
En esta parte ya no es el objetivo encontrar defectos de comportamiento de software, aqui pretendemos valorar en que grado el software satisface las expectativas de cliente. (evaluar la calidad de software)
Usamos Selenium IDE para automatizar pruebas funcionales. Es m치s facil y m치s rapido de implementar.
Pero tenemos test inflexibles. Tenemos duplicacion de codigo. Los test no se pueden parametrizar. No soporta la gestion de errores. No se pueden integrar en la construccion de proyecto.

Comandos que m치s usados
[comando]       [target]      [value] 
click
verify text
store text      target        var
type            [target]      texto
echo            ${var}
assert          var1          ${var2}
execute script  script        nombreVar
if              ${va1}==x
end

Comandos que no se han usado pero salen en teoria
if-elseif-else-end
times, end
do, repeat if
while, end

---------------------------------
P08
---------------------------------
Usamos WebDriver para tambien automatizar pruebas funcionales

Elementos WebDriver que usaremos
driver.get("url")
driver.getTitle();
driver.findElement(new By.ById("id"));
webElement.click();
webElement.sendKeys("texto");

Actions builder = new Actions(driver);
builder.moveToElement(elem);
builder.perform()'

String handle = driver.getWindowHandle();
driver.switchTo().window(stringId)


Siempre debemos incluir:
@AfterEach
public void close(){
  driver.close();
}

---------------------------------
POM
---------------------------------

<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-api</artifactId>
        <version>4.8.3</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-chrome-driver</artifactId>
        <version>4.8.3</version>
        <scope>compile</scope>
    </dependency>
</dependencies>

---------------------------------
Si queremos incluir headless 
---------------------------------
en el POM:

<properties>
 ...
 <headless.value>false</headless.value>
</properties>

<plugin>
 ...
 <artifactId>maven-surefire-plugin</artifactId>
 ...
 <configuration>
   <systemPropertyVariables>
    <chromeHeadless>${headless.value}</chromeHeadless>
   </systemPropertyVariables>
 </configuration>
</plugin>

En el codigo:
@BeforeEach
public void setup(){
    ChromeOptions chromeOptions = new ChromeOptions();
    boolean headless = Boolean.parseBoolean(System.getProperty("chromeHeadless"));
    chromeOptions.setHeadless(headless);
    driver = new ChromeDriver();
    myAccountPage = PageFactory.initElements(driver,MyAccountPage.class);
}

Para llamar:
mvn test ... -Dheadless.value=true
---------------------------------
Ejemplo de test sin Page Object:
---------------------------------

WebDriver driver;

@BeforeEach
public void setup(){
  driver = new chromeDriver();
  driver.get("url")
}
---------------------------------
Ejemplo de test con Page Object:
---------------------------------
public class HomePage{
  WebDriver driver;
  WebElement linkLogin;
  
  public HomePage(WebDriver driver){
    this.driver = driver;
    driver.get("url");
    linkLogin = driver.findElement(new By.ById("id"));
  }
  
  public CustomerLoginPage enterLoginPage(){
    login.click();
    return new CustomerLoginPage(driver);
  }
  
  public String getTitle(){
    return driver.getTitle();
  }
  
}

public class TestLogin{
  WebDriver driver;
  HomePage homePage;

  @BeforeEach
  public void setup(){
    driver = new chromeDriver();
    homePage = new HomePage(driver);
  }

  @Test
  public void test(){
    assertEquals("titulo", homePage.getTitle());
    LoginPage loginPage = homePage.goToLogin();
    ...
  }
}

---------------------------------
Ejemplo de test con Page Object y Page Factory:
---------------------------------
public class TestLogin{
  WebDriver driver;
  MyAccountPage myAccountPage;
  @BeforeEach
  public void setup(){
      driver = new ChromeDriver();
      homePage = PageFactory.initElements(driver, HomePage.class);
  }
  
  ...Tests
}

public class HomePage{

  WebDriver driver;
  @FindBy(name/id/xpath/linkText = "") WebElement elem;

 public HomePage(WebDriver driver) {
  this.driver = driver;
  driver.get("url");
 }

}



---------------------------------
P09
---------------------------------
Pruebas funcionales --> Que hace el sistema.
Usaremos JMeter para las pruebas no funcionales --> Como de bien lo hace el sistema.

Metricas de los criterios de aceptacion:
- Fiabilidad: usamos MTTF (Mean Time To Failure), MTTR(Mean Time To Repair), y MTBF=MTTF+MTTR (MTBF: Mean time between failures)
- Disponibilidad: medimos MTTR. La idea es minimizarlo
- Mantenibilidad: usamos MTTR para ver el tiempo que se tarda en analizar, dise침ar, implementar y probar.
- Escalabilidad

Ejemplos de prueba:
- De Carga: numero de usuarios concurrentes. Valida el rendimiento
- De pruebas de stress: peticiones por encima de limite de sistema. Valida la fiablidad y robustez

JMeter
Si tenemos el grupo de hilos formado por 2 hilos con 2 samplers y 5 iteracion cada hilo realiza 10 peticiones (2 samplers * 5)
Plan de pruebas
  Hilo de ejecucion
    Sampler --> puede contener un assertion
    Assertion
    Controlador logico --> Simple/Loop/Only once/Interleave controller y puede contener samplers
  Elementos de configuracion --> HTTP Cookie Manager/ HTTP request Defaults.
  Timers --> Constant timer/Uniform random timer/Gaussian random timer
  Listener --> todos los listeners guardan la misma inforamcion. La diferencia es en como lo presentan.
  
  
---------------------------------
P10
---------------------------------





